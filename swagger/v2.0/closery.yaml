swagger: '2.0'
info:
  description: Closery API server
  version: 1.0.0
  title: 'Closery API'
  termsOfService: 'http://closery.com/terms/'
  contact:
    name: apiteam@closery.com
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: /v1
paths:
  /user/createWithList:
    post:
      tags:
        - user
      summary: 'Creates list of users with given input array'
      description: ""
      operationId: createUsersWithListInput
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: body
          name: body
          description: 'List of user object'
          required: false
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: 'successful operation'
  /product:
    put:
      tags:
        - product
      summary: 'Update an existing product'
      description: ""
      operationId: updateProduct
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: body
          name: body
          description: 'Product object that needs to be added to the store'
          required: false
          schema:
            $ref: '#/definitions/Product'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Product not found'
        '405':
          description: 'Validation exception'
    post:
      tags:
        - product
      summary: 'Add a new product to the store'
      description: ""
      operationId: addProduct
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: body
          name: body
          description: 'Product object that needs to be added to the store'
          required: false
          schema:
            $ref: '#/definitions/Product'
      responses:
        '405':
          description: 'Invalid input'
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: 'Find purchase order by ID'
      description: 'For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions'
      operationId: getOrderById
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: path
          name: orderId
          description: 'ID of product that needs to be fetched'
          required: true
          type: string
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Order not found'
    delete:
      tags:
        - store
      summary: 'Delete purchase order by ID'
      description: 'For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors'
      operationId: deleteOrder
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: path
          name: orderId
          description: 'ID of the order that needs to be deleted'
          required: true
          type: string
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Order not found'
  /user/createWithArray:
    post:
      tags:
        - user
      summary: 'Creates list of users with given input array'
      description: ""
      operationId: createUsersWithArrayInput
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: body
          name: body
          description: 'List of user object'
          required: false
      responses:
        default:
          description: 'successful operation'
  /store/order:
    post:
      tags:
        - store
      summary: 'Place an order for a product'
      description: ""
      operationId: placeOrder
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: body
          name: body
          description: 'order placed for purchasing the product'
          required: false
          schema:
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: 'Invalid Order'
  /product/findByStatus:
    get:
      tags:
        - product
      summary: 'Finds Products by status'
      description: 'Multiple status values can be provided with comma seperated strings'
      operationId: findProductsByStatus
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: query
          name: status
          description: 'Status values that need to be considered for filter'
          required: false
          type: array
          items:
            type: string
          collectionFormat: jaxrs
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Product'
        '400':
          description: 'Invalid status value'
  '/user/{username}':
    get:
      tags:
        - user
      summary: 'Get user by user name'
      description: ""
      operationId: getUserByName
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: path
          name: username
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 'Invalid username supplied'
        '404':
          description: 'User not found'
    put:
      tags:
        - user
      summary: 'Updated user'
      description: 'This can only be done by the logged in user.'
      operationId: updateUser
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: path
          name: username
          description: 'name that need to be deleted'
          required: true
          type: string
        -
          in: body
          name: body
          description: 'Updated user object'
          required: false
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: 'Invalid user supplied'
        '404':
          description: 'User not found'
    delete:
      tags:
        - user
      summary: 'Delete user'
      description: 'This can only be done by the logged in user.'
      operationId: deleteUser
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: path
          name: username
          description: 'The name that needs to be deleted'
          required: true
          type: string
      responses:
        '400':
          description: 'Invalid username supplied'
        '404':
          description: 'User not found'
  /product/findByTags:
    get:
      tags:
        - product
      summary: 'Finds Products by tags'
      description: 'Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.'
      operationId: findProductsByTags
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: query
          name: tags
          description: 'Tags to filter by'
          required: false
          type: array
          items:
            type: string
          collectionFormat: jaxrs
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Product'
        '400':
          description: 'Invalid tag value'
  /user:
    post:
      tags:
        - user
      summary: 'Create user'
      description: 'This can only be done by the logged in user.'
      operationId: createUser
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: body
          name: body
          description: 'Created user object'
          required: false
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: 'successful operation'
  /user/logout:
    get:
      tags:
        - user
      summary: 'Logs out current logged in user session'
      description: ""
      operationId: logoutUser
      produces:
        - application/json
        - application/xml
      responses:
        default:
          description: 'successful operation'
  /user/login:
    get:
      tags:
        - user
      summary: 'Logs user into the system'
      description: ""
      operationId: loginUser
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: query
          name: username
          description: 'The user name for login'
          required: false
          type: string
        -
          in: query
          name: password
          description: 'The password for login in clear text'
          required: false
          type: string
      responses:
        '200':
          description: 'successful operation'
          schema:
            type: string
        '400':
          description: 'Invalid username/password supplied'
  '/product/{productId}':
    get:
      tags:
        - product
      summary: 'Find product by ID'
      description: 'Returns a product when ID < 10.  ID > 10 or nonintegers will simulate API error conditions'
      operationId: getProductById
      produces:
        - application/json
        - application/xml
      parameters:
        -
          in: path
          name: productId
          description: 'ID of product that needs to be fetched'
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Product'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Product not found'
definitions:
  User:
    properties:
      phone:
        type: string
      password:
        type: string
      email:
        type: string
      lastName:
        type: string
      firstName:
        type: string
      username:
        type: string
      id:
        type: integer
        format: int64
      userStatus:
        type: integer
        format: int32
        position: 0
  Category:
    properties:
      name:
        type: string
      id:
        type: integer
        format: int64
  Product:
    enum:
      - images
      - name
    properties:
      tags:
        type: array
        description: A list of tags to categorize this product
        items:
          $ref: Tag
      images:
        type: array
        description: A list of product images
        items:
          $ref: Image
      category:
        $ref: Category
      id:
        type: integer
        format: int64
      name:
        type: string
        example: apple-pie
        description: Name which can also be used as a handle
        position: 0
      title:
        type: string
        example: Apple Pie
        description: The title of this product
        position: 1
      description:
        type: string
        description: The description of this product
        position: 2
      status:
        type: string
      variants:
        $ref: ProductVariant
      created_at:
        type: string
        description: When this product was created
        format: dateTime
      updated_at:
        type: string
        description: When this product was last updated
        format: dateTime
      published_at:
        type: string
        description: When this product was published
        format: dateTime
  Tag:
    properties:
      name:
        type: string
      id:
        type: integer
        format: int64
  Image:
    properties:
      caption:
        type: string
        description: Image caption
      description:
        type: string
        description: A full description of this image
      src:
        type: string
        format: url
        required: true
  ProductVariant:
    created_at:
      type: string
      format: dateTime
      description: The time this variant was created
    updated_at:
      type: string
      format: dateTime
      description: The time this variant was updated
    sku:
      type: string
      description: Stock Keeping Unit
    quantity:
      type: string
      description: The quantity in stock
    title:
      type: string
      description: The title of this variant
    price:
      type: integer
      description: The price of this variant

  Order:
    properties:
      complete:
        $ref: boolean
      shipDate:
        type: string
        format: date-time
      quantity:
        type: integer
        format: int32
      productId:
        type: integer
        format: int64
      id:
        type: integer
        format: int64
      status:
        type: string
        position: 0
  boolean:
    properties: {  }
